@using Assessment3.Client.Configuration;
@using Assessment3.Shared.Models.Authentication;
@using Blazored.LocalStorage;
@using Newtonsoft.Json;
<nav class="navbar navbar-expand-lg navbar-dark bg-dark shadow-lg">
    <a class="navbar-brand" href="#">X Events</a>
    <button class="navbar-toggler" @onclick="ToggleNavMenu" type="button" data-toggle="collapse" data-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
    </button>
    <div class="@NavMenuCssClass navbar-collapse" id="navbarNav">
        <ul class="navbar-nav me-auto">
            <li class="nav-item">
                <a class="nav-link" href="/">Home</a>
            </li>
            <li class="nav-item">
                <a class="nav-link" href="/my-events">My Events</a>
            </li>
        </ul>
        <form class="d-flex">
            <AuthorizeView>
                <Authorized>
                    <b>
                        <a @onclick="Logout" class="nav-link" role="button">
                            <div class="d-flex">
                                <span class="ms-2">Log out, @GetLoggedUser()</span>
                            </div>
                        </a>
                    </b>
                </Authorized>
            </AuthorizeView>
        </form>
    </div>
</nav>

@code {
    [Inject] public required AuthenticationStateProvider State { get; set; }
    [Inject] public required ILocalStorageService LocalStorage { get; set; }
    [Inject] public required ISyncLocalStorageService SyncLocalStorage { get; set; }
    private bool collapseNavMenu = true;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }
    private async void Logout()
    {
        await LocalStorage.RemoveItemAsync(UserConfig.User);
        await State.GetAuthenticationStateAsync();
    }

    private string GetLoggedUser()
    {
        var userJson = SyncLocalStorage.GetItemAsString(UserConfig.User);
        return string.IsNullOrEmpty(userJson) ? "" : JsonConvert.DeserializeObject<AuthenticationResponse>(userJson).FirstName;
    }

}